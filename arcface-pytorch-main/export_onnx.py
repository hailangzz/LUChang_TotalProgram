from PIL import Imagefrom arcface import Arcfaceimport torchimport torchvision.models as modelsimport torch.nn as nnif __name__ == "__main__":    # model_ = Arcface(cuda=False, mode="train")    model_ = Arcface(cuda=False) #模型加载时因为不是用GPU，因此不要用torch.nn.DataParallel(self.net)，来加载模型，否则会报错    model = model_.net    # model = model.generate()    print(model)    pth_file_path=r"model_data/arcface_mobilefacenet.pth"    # 加载.pth模型参数    checkpoint = torch.load(pth_file_path)    # 如果您的.pth文件中使用了DataParallel，则需要使用model.module加载参数    # model = torch.nn.DataParallel(model)    # model.load_state_dict(checkpoint['state_dict'])    model.load_state_dict(checkpoint)    # model.eval()    # 创建一个输入张量，这里以(batch_size, channels, height, width)为例    input_shape = (1, 3, 112, 112)    dummy_input = torch.randn(input_shape)    # 定义导出文件路径    onnx_filename = "arcface.onnx"    # 导出模型为ONNX格式    torch.onnx.export(model, dummy_input, onnx_filename, export_params=True, opset_version=11, do_constant_folding=True,                      input_names=['face_input'], output_names=['face_feature_output'])