import torchimport torch.nn as nnimport torch.optim as optimimport torch.quantization# 定义一个简单的全连接神经网络作为示例模型class SimpleModel(nn.Module):    def __init__(self):        super(SimpleModel, self).__init__()        self.fc1 = nn.Linear(784, 256)        self.relu = nn.ReLU()        self.fc2 = nn.Linear(256, 10)    def forward(self, x):        x = self.fc1(x)        x = self.relu(x)        x = self.fc2(x)        return x# 创建模型实例model = SimpleModel()# 随机生成输入数据input_data = torch.randn(1, 784)# 将模型设置为eval模式（关闭Dropout等操作）model.eval()# 执行模型的前向传播output = model(input_data)# 在进行固定点量化之前，可以先进行一些训练和评估操作来确保模型性能# 对模型进行固定点量化quantized_model = torch.quantization.quantize_dynamic(    model, {nn.Linear}, dtype=torch.qint8)# 验证固定点量化后的模型性能quantized_output = quantized_model(input_data)print("Original Model Output:", output)print("Quantized Model Output:", quantized_output)# 将固定点量化后的模型保存为ONNX模型input_names = ["input"]output_names = ["output"]torch.onnx.export(model, input_data, "quantized_model.onnx", input_names=input_names, output_names=output_names,opset_version=10)